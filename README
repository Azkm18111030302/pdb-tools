                                pdb-tools                               Release 0.1                             April 22,  2008pdb-tools is a set of python scripts that manipulate wwPDB macromoleculestructure files.  There are many programs, both open source and proprietary,that perform similar tasks; however, most of these tools are buried withinprograms of larger functionality.  Thus, relatively simple calculations ofteninvolve learning a new program, compiling modules, and installing libraries. Tofill a niche (and get the tasks done that I needed done), I started writing myown toolset.  This has evolved into the pdb-tools suite.  The suite of programsis characterized by the following philosophy:    1) Each program should run as a stand-alone application with a standard,       GNU/POSIX style command line interface.    2) Each program should be written in such a way to allow it to be used       as a library of functions for more complex programs.      3) Programs should require a minimum of external dependencies.  (Thus,        Python's builtin list types are used over the faster, albiet "external"       array types).Most of the scripts will run "out of the box" using a python interpreter.  Thecommand line parser is designed to be flexible.  It will take an arbitarily long list of pdb files, pdb ids, text files with pdb ids, or some mixture ofall three.  If the pdb file or id is not in the working directory, scripts willattempt to download the pdb file from RCSB (http://www.rcsb.org/).  Availableoptions for each script can be accessed by typing pdb_XXXX.py --help.Depending on the type of operation being done, a program will either write output files in the working directory or will print to stdout.  This can becaught with a ">" redirect and placed in a file.  All structure outputs arewritten in standard pdb format.  All data outputs are in fixed-width column format.  They were designed to be read by the statistics package R (http://cran.r-project.org/); however, they should be easily parsed by othergraphing programs.-------------------------------------------------------------------------------External dependencies:-------------------------------------------------------------------------------Several of the programs in this suite are designed as interfaces to other,more complicated, programs that must be downloaded and installed separately.  These programs need only be installed if the scripts listed below are needed:CHARMM (http://www.charmm.org/)     pdb_addH.py    pdb_clean.py    pdb_mutator.py    charmm/interface.py    charmm/gen_input.pyTo use CHARMM with pdb-tools, define the environment variable $CHARMM to pointto the directory containing the charmm binary, and $CHARMM_LIB to point to thedirectory with the CHARMM topology and parameter files.DSSP (http://swift.cmbi.ru.nl/gv/dssp/)    pdb_dssp.pyNACCESS (http://www.bioinf.manchester.ac.uk/naccess/)    pdb_sasa.pyFor both of these programs, simply make sure that dssp and naccess are in thepath.pdb_satk.py requires the user to compile the fortran programs in the satkdirectory.  This can be done by editing the satk/Makefile to point to a validfortran compiler, then running "make" in the satk directory.  This has been tested using the g77 compilers.  For more information on the programs, see theREADME file in the satk directory.-------------------------------------------------------------------------------Using independent scripts as libraries:-------------------------------------------------------------------------------Each program is written with a main() function that parses the command line andcycles through a list of pdb files.  This then calls a function that is namedin the same way as the script itself: the script pdb_test.py would have a function pdbTest.  This function is the core of the script.  It can be called from another script, requring only to be passed a list of lines from a pdb fileand any other arguments/options specified in that function definition.
